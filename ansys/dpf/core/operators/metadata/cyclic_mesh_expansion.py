"""Autogenerated DPF operator classes.

Created on 10/06/2021, 13:12:29
"""
from collections import OrderedDict
from collections import namedtuple
from ansys.dpf import core as dpf

InputSpec = namedtuple('InputSpec', ['document', 'ellipsis', 'name', 'optional',
                                     'type_names'])

OutputSpec = namedtuple('OutputSpec', ['name', 'type_names', 'document'])


class CyclicMeshExpansion(dpf.Operator):
    """DPF "cyclic_expansion_mesh" Operator

    Expand the mesh.

    Available inputs:
     -   sectors_to_expand : list, Scoping, ScopingsContainer,
            optional
         Sectors to expand (start at 0), for multistage: use scopings
         container with 'stage' label.
     -   cyclic_support : CyclicSupport
     -   sector_meshed_region : MeshedRegion, MeshesContainer,
            optional
    Available outputs:
     -   meshed_region
     -   cyclic_support


    Parameters
    ----------
    cyclic_support : cyclic_support


    sector_meshed_region : MeshedRegion or meshes_container, optional


    sectors_to_expand : list or Scoping or scopings_container,
        optional
        Sectors to expand (start at 0), for multistage: use scopings
        container with 'stage' label.

    Examples
    --------
    >>> op = dpf.operators.CyclicMeshExpansion()
    >>> op.inputs.sectors_to_expand.connect(my_sectors_to_expand)  # optional
    >>> op.inputs.cyclic_support.connect(my_cyclic_support)
    >>> op.inputs.sector_meshed_region.connect(my_sector_meshed_region)  # optional
    >>> my_meshed_region = op.outputs.meshed_region()
    >>> my_cyclic_support = op.outputs.cyclic_support()
    """  # noqa: E501

    class _Inputs(dpf.inputs.Inputs):

        # fmt: off
        _spec = OrderedDict([(7, InputSpec(document='', ellipsis=False, name='sector_meshed_region', optional=True, type_names=['abstract_meshed_region', 'meshes_container'])), (16, InputSpec(document='', ellipsis=False, name='cyclic_support', optional=False, type_names=['cyclic_support'])), (18, InputSpec(document="sectors to expand (start at 0), for multistage: use scopings container with 'stage' label.", ellipsis=False, name='sectors_to_expand', optional=True, type_names=['vector<int32>', 'scoping', 'scopings_container']))]) # noqa: E501
        # fmt: on

        def __init__(self, oper):
            self._sector_meshed_region = None
            self._cyclic_support = None
            self._sectors_to_expand = None
            super().__init__(self._spec, oper)

        @property
        def sector_meshed_region(self):
            return self._sector_meshed_region

        @sector_meshed_region.setter
        def sector_meshed_region(self, sector_meshed_region):
            self._sector_meshed_region.connect(sector_meshed_region)

        @property
        def cyclic_support(self):
            return self._cyclic_support

        @cyclic_support.setter
        def cyclic_support(self, cyclic_support):
            self._cyclic_support.connect(cyclic_support)

        @property
        def sectors_to_expand(self):
            """sectors to expand (start at 0), for multistage: use
            scopings container with 'stage' label."""
            return self._sectors_to_expand

        @sectors_to_expand.setter
        def sectors_to_expand(self, sectors_to_expand):
            self._sectors_to_expand.connect(sectors_to_expand)

    class _Outputs(dpf.outputs.Outputs):

        # fmt: off
        _spec = OrderedDict([(0, OutputSpec(name='meshed_region', type_names=['abstract_meshed_region'], document='expanded meshed region.')), (1, OutputSpec(name='cyclic_support', type_names=['cyclic_support'], document='input cyclic support modified in place containing the new expanded meshed regions.'))]) # noqa: E501
        # fmt: on

        def __init__(self, oper):
            self._meshed_region = None
            self._cyclic_support = None
            super().__init__(self._spec, oper)

        @property
        def meshed_region(self):
            """expanded meshed region."""
            return self._meshed_region

        @property
        def cyclic_support(self):
            """input cyclic support modified in place containing the
            new expanded meshed regions."""
            return self._cyclic_support

    def __init__(
        self, cyclic_support, sector_meshed_region=None, sectors_to_expand=None
    ):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "cyclic_expansion_mesh"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def meshed_region(self):
        """expanded meshed region."""
        return self.outputs._meshed_region

    @property
    def cyclic_support(self):
        """input cyclic support modified in place containing the new
        expanded meshed regions."""
        return self.outputs._cyclic_support
