"""Autogenerated DPF operator classes.

Created on 10/06/2021, 13:12:29
"""
from collections import OrderedDict
from collections import namedtuple
from ansys.dpf import core as dpf

InputSpec = namedtuple('InputSpec', ['document', 'ellipsis', 'name', 'optional',
                                     'type_names'])

OutputSpec = namedtuple('OutputSpec', ['name', 'type_names', 'document'])


class ForwardFieldsContainer(dpf.Operator):
    """DPF "forward_fc" Operator

    Return the input field or fields container.

    Available inputs:
     -   fields : FieldsContainer, Field
    Available outputs:
     -   fields_container


    Parameters
    ----------
    fields : FieldsContainer or Field




    Examples
    --------
    >>> op = dpf.operators.ForwardFieldsContainer()
    >>> op.inputs.fields.connect(my_fields)
    >>> my_fields_container = op.outputs.fields_container()
    """  # noqa: E501

    class _Inputs(dpf.inputs.Inputs):

        # fmt: off
        _spec = OrderedDict([(0, InputSpec(document='', ellipsis=False, name='fields', optional=False, type_names=['fields_container', 'field']))]) # noqa: E501
        # fmt: on

        def __init__(self, oper):
            self._fields = None
            super().__init__(self._spec, oper)

        @property
        def fields(self):
            return self._fields

        @fields.setter
        def fields(self, fields):
            self._fields.connect(fields)

    class _Outputs(dpf.outputs.Outputs):

        # fmt: off
        _spec = OrderedDict([(0, OutputSpec(name='fields_container', type_names=['fields_container'], document=''))]) # noqa: E501
        # fmt: on

        def __init__(self, oper):
            self._fields_container = None
            super().__init__(self._spec, oper)

        @property
        def fields_container(self):
            return self._fields_container

    def __init__(self, fields):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "forward_fc"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def fields_container(self):
        return self.outputs._fields_container
