"""Autogenerated DPF operator classes.

Created on 10/06/2021, 13:12:29
"""
from collections import OrderedDict
from collections import namedtuple
from ansys.dpf import core as dpf

InputSpec = namedtuple('InputSpec', ['document', 'ellipsis', 'name', 'optional',
                                     'type_names'])

OutputSpec = namedtuple('OutputSpec', ['name', 'type_names', 'document'])


class IdenticalFields(dpf.Operator):
    """DPF "AreFieldsIdentical" Operator

    Check if two fields are identical.

    Available inputs:
     -   fieldB : Field
     -   double_value : float, optional
         Double positive small value. smallest value which will be
         considered during the comparison step: all the abs(values) in
         field less than this value is considered as null, (default
         value:1.0e-14).
     -   fieldA : Field
     -   double_tolerance : float, optional
         Double relative tolerance.maximum tolerance gap between to
         compared values : values within relative tolerance are
         considered identical(v1 - v2) / v2 < relativetol(default is
         0.001).
    Available outputs:
     -   boolean
     -   message


    Parameters
    ----------
    fieldA : Field


    fieldB : Field


    double_value : float, optional
        Double positive small value. smallest value which will be
        considered during the comparison step: all the abs(values) in
        field less than this value is considered as null, (default
        value:1.0e-14).

    double_tolerance : float, optional
        Double relative tolerance.maximum tolerance gap between to
        compared values : values within relative tolerance are
        considered identical(v1 - v2) / v2 < relativetol(default is
        0.001).

    Examples
    --------
    >>> op = dpf.operators.IdenticalFields()
    >>> op.inputs.fieldB.connect(my_fieldB)
    >>> op.inputs.double_value.connect(my_double_value)  # optional
    >>> op.inputs.fieldA.connect(my_fieldA)
    >>> op.inputs.double_tolerance.connect(my_double_tolerance)  # optional
    >>> my_boolean = op.outputs.boolean()
    >>> my_message = op.outputs.message()
    """  # noqa: E501

    class _Inputs(dpf.inputs.Inputs):

        # fmt: off
        _spec = OrderedDict([(0, InputSpec(document='', ellipsis=False, name='fieldA', optional=False, type_names=['field'])), (1, InputSpec(document='', ellipsis=False, name='fieldB', optional=False, type_names=['field'])), (2, InputSpec(document='Double positive small value. Smallest value which will be considered during the comparison step: all the abs(values) in field less than this value is considered as null, (default value:1.0e-14).', ellipsis=False, name='double_value', optional=True, type_names=['double'])), (3, InputSpec(document='Double relative tolerance.Maximum tolerance gap between to compared values : values within relative tolerance are considered identical(v1 - v2) / v2 < relativeTol(default is 0.001).', ellipsis=False, name='double_tolerance', optional=True, type_names=['double']))]) # noqa: E501
        # fmt: on

        def __init__(self, oper):
            self._fieldA = None
            self._fieldB = None
            self._double_value = None
            self._double_tolerance = None
            super().__init__(self._spec, oper)

        @property
        def fieldA(self):
            return self._fieldA

        @fieldA.setter
        def fieldA(self, fieldA):
            self._fieldA.connect(fieldA)

        @property
        def fieldB(self):
            return self._fieldB

        @fieldB.setter
        def fieldB(self, fieldB):
            self._fieldB.connect(fieldB)

        @property
        def double_value(self):
            """Double positive small value. Smallest value which will
            be considered during the comparison step: all the
            abs(values) in field less than this value is considered
            as null, (default value:1.0e-14)."""
            return self._double_value

        @double_value.setter
        def double_value(self, double_value):
            self._double_value.connect(double_value)

        @property
        def double_tolerance(self):
            """Double relative tolerance.Maximum tolerance gap
            between to compared values : values within relative
            tolerance are considered identical(v1 - v2) / v2 <
            relativeTol(default is 0.001)."""
            return self._double_tolerance

        @double_tolerance.setter
        def double_tolerance(self, double_tolerance):
            self._double_tolerance.connect(double_tolerance)

    class _Outputs(dpf.outputs.Outputs):

        # fmt: off
        _spec = OrderedDict([(0, OutputSpec(name='boolean', type_names=['bool'], document='bool (true if identical...)')), (1, OutputSpec(name='message', type_names=['string'], document=''))]) # noqa: E501
        # fmt: on

        def __init__(self, oper):
            self._boolean = None
            self._message = None
            super().__init__(self._spec, oper)

        @property
        def boolean(self):
            """bool (true if identical...)"""
            return self._boolean

        @property
        def message(self):
            return self._message

    def __init__(self, fieldA, fieldB, double_value=None, double_tolerance=None):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "AreFieldsIdentical"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def boolean(self):
        """bool (true if identical...)"""
        return self.outputs._boolean

    @property
    def message(self):
        return self.outputs._message
