"""Autogenerated DPF operator classes.

Created on 01/15/2021, 00:24:02
"""
from collections import OrderedDict
from collections import namedtuple
from ansys.dpf import core as dpf

InputSpec = namedtuple('InputSpec', ['document', 'ellipsis', 'name', 'optional',
                                     'type_names'])

OutputSpec = namedtuple('OutputSpec', ['name', 'type_names', 'document'])


class Serializer(dpf.Operator):
    """DPF "serializer" Operator

    Take any input and serialize them in a file.

    Available inputs:
     -   ``any_input`` : Any
         Any input
         is ellipsis

     -   ``file_path`` : str


    Available outputs:
     -   file_path


    Parameters
    ----------
    file_path : str


    any_input :
        Any input



    Examples
    --------
    >>> op = dpf.operators.Serializer()
    >>> op.inputs.any_input.connect(my_any_input)
    >>> op.inputs.file_path.connect(my_file_path)
    >>> my_file_path = op.outputs.file_path()
    """

    class _Inputs(dpf.inputs.Inputs):
        _spec = OrderedDict([(0, InputSpec(document='', ellipsis=False, name='file_path', optional=False, type_names=['string'])), (1, InputSpec(document='any input', ellipsis=True, name='any_input', optional=False, type_names=[]))])
        def __init__(self, oper):
            self._file_path = None
            self._any_input = None
            super().__init__(self._spec, oper)

        @property
        def file_path(self):
            return self._file_path

        @file_path.setter
        def file_path(self, file_path):
            self._file_path.connect(file_path)

        @property
        def any_input(self):
            """any input"""
            return self._any_input

        @any_input.setter
        def any_input(self, any_input):
            self._any_input.connect(any_input)


    class _Outputs(dpf.outputs.Outputs):
        _spec = OrderedDict([(0, OutputSpec(name='file_path', type_names=['string'], document=''))])
        def __init__(self, oper):
            self._file_path = None
            super().__init__(self._spec, oper)

        @property
        def file_path(self):
            """"""
            return self._file_path


    def __init__(self, file_path, any_input):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "serializer"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def file_path(self):
        """"""
        return self.outputs._file_path



class MechanicalCsvToField(dpf.Operator):
    """DPF "mechanical_csv_to_field" Operator

    Reads mechanical exported csv file

    Available inputs:
     -   ``data_sources`` : DataSources

     -   ``unit`` : N14Dataprocessing4Unit5Cunite

     -   ``mesh`` : MeshedRegion, optional

     -   ``requested_location`` : str, FieldDefinition


    Available outputs:
     -   field


    Parameters
    ----------
    unit : N14dataProcessing4unit5CUnitE


    data_sources : DataSources


    requested_location : str or FieldDefinition


    mesh : MeshedRegion, optional


    Examples
    --------
    >>> op = dpf.operators.MechanicalCsvToField()
    >>> op.inputs.data_sources.connect(my_data_sources)
    >>> op.inputs.unit.connect(my_unit)
    >>> op.inputs.mesh.connect(my_mesh)  # optional
    >>> op.inputs.requested_location.connect(my_requested_location)
    >>> my_field = op.outputs.field()
    """

    class _Inputs(dpf.inputs.Inputs):
        _spec = OrderedDict([(0, InputSpec(document='', ellipsis=False, name='unit', optional=False, type_names=['N14dataProcessing4unit5CUnitE'])), (1, InputSpec(document='', ellipsis=False, name='mesh', optional=True, type_names=['abstract_meshed_region'])), (4, InputSpec(document='', ellipsis=False, name='data_sources', optional=False, type_names=['data_sources'])), (9, InputSpec(document='', ellipsis=False, name='requested_location', optional=False, type_names=['string', 'field_definition']))])
        def __init__(self, oper):
            self._unit = None
            self._mesh = None
            self._data_sources = None
            self._requested_location = None
            super().__init__(self._spec, oper)

        @property
        def unit(self):
            return self._unit

        @unit.setter
        def unit(self, unit):
            self._unit.connect(unit)

        @property
        def mesh(self):
            return self._mesh

        @mesh.setter
        def mesh(self, mesh):
            self._mesh.connect(mesh)

        @property
        def data_sources(self):
            return self._data_sources

        @data_sources.setter
        def data_sources(self, data_sources):
            self._data_sources.connect(data_sources)

        @property
        def requested_location(self):
            return self._requested_location

        @requested_location.setter
        def requested_location(self, requested_location):
            self._requested_location.connect(requested_location)


    class _Outputs(dpf.outputs.Outputs):
        _spec = OrderedDict([(0, OutputSpec(name='field', type_names=['field'], document=''))])
        def __init__(self, oper):
            self._field = None
            super().__init__(self._spec, oper)

        @property
        def field(self):
            """"""
            return self._field


    def __init__(self, unit, data_sources, requested_location, mesh=None):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "mechanical_csv_to_field"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def field(self):
        """"""
        return self.outputs._field



class Deserializer(dpf.Operator):
    """DPF "deserializer" Operator

    Takes a file generated by the serializer and deserializes it into
    DPF's enitities.

    Available inputs:
     -   ``file_path`` : str
         File path


     Available outputs:


    Parameters
    ----------
    file_path : str
        File path



    Examples
    --------
    >>> op = dpf.operators.Deserializer()
    >>> op.inputs.file_path.connect(my_file_path)
    >>> my_any_ouptut = op.outputs.any_ouptut()
    """

    class _Inputs(dpf.inputs.Inputs):
        _spec = OrderedDict([(0, InputSpec(document='file path', ellipsis=False, name='file_path', optional=False, type_names=['string']))])
        def __init__(self, oper):
            self._file_path = None
            super().__init__(self._spec, oper)

        @property
        def file_path(self):
            """file path"""
            return self._file_path

        @file_path.setter
        def file_path(self, file_path):
            self._file_path.connect(file_path)


    class _Outputs(dpf.outputs.Outputs):
        _spec = OrderedDict([(1, OutputSpec(name='any_ouptut', type_names=[], document='number and types of outputs corresponding of the inputs used in the serialization'))])
        def __init__(self, oper):
            self._any_ouptut = None
            super().__init__(self._spec, oper)

        @property
        def any_ouptut(self):
            """number and types of outputs corresponding of the inputs used in the serialization"""
            return self._any_ouptut


    def __init__(self, file_path):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "deserializer"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def any_ouptut(self):
        """number and types of outputs corresponding of the inputs used in the serialization"""
        return self.outputs._any_ouptut



class CsvToField(dpf.Operator):
    """DPF "csv_to_field" Operator

    transform csv file to a field or fields container

    Available inputs:
     -   ``data_sources`` : DataSources
         Data sources containing a file with csv extension

     -   ``time_scoping`` : Scoping, optional


    Available outputs:
     -   fields_container


    Parameters
    ----------
    data_sources : DataSources
        Data sources containing a file with csv extension

    time_scoping : Scoping, optional


    Examples
    --------
    >>> op = dpf.operators.CsvToField()
    >>> op.inputs.data_sources.connect(my_data_sources)
    >>> op.inputs.time_scoping.connect(my_time_scoping)  # optional
    >>> my_fields_container = op.outputs.fields_container()
    """

    class _Inputs(dpf.inputs.Inputs):
        _spec = OrderedDict([(0, InputSpec(document='', ellipsis=False, name='time_scoping', optional=True, type_names=['scoping'])), (4, InputSpec(document='data sources containing a file with csv extension', ellipsis=False, name='data_sources', optional=False, type_names=['data_sources']))])
        def __init__(self, oper):
            self._time_scoping = None
            self._data_sources = None
            super().__init__(self._spec, oper)

        @property
        def time_scoping(self):
            return self._time_scoping

        @time_scoping.setter
        def time_scoping(self, time_scoping):
            self._time_scoping.connect(time_scoping)

        @property
        def data_sources(self):
            """data sources containing a file with csv extension"""
            return self._data_sources

        @data_sources.setter
        def data_sources(self, data_sources):
            self._data_sources.connect(data_sources)


    class _Outputs(dpf.outputs.Outputs):
        _spec = OrderedDict([(0, OutputSpec(name='fields_container', type_names=['fields_container'], document=''))])
        def __init__(self, oper):
            self._fields_container = None
            super().__init__(self._spec, oper)

        @property
        def fields_container(self):
            """"""
            return self._fields_container


    def __init__(self, data_sources, time_scoping=None):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "csv_to_field"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def fields_container(self):
        """"""
        return self.outputs._fields_container



