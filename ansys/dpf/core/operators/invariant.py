"""Autogenerated DPF operator classes.

Created on 01/15/2021, 00:24:02
"""
from collections import OrderedDict
from collections import namedtuple
from ansys.dpf import core as dpf

InputSpec = namedtuple('InputSpec', ['document', 'ellipsis', 'name', 'optional',
                                     'type_names'])

OutputSpec = namedtuple('OutputSpec', ['name', 'type_names', 'document'])


class EigenValuesFc(dpf.Operator):
    """DPF "eig_values_fc" Operator

    Computes the element-wise eigen values of all the tensor fields of
    a fields container.

    Available inputs:
     -   ``fields_container`` : FieldsContainer


    Available outputs:
     -   fields_container


    Parameters
    ----------
    fields_container : FieldsContainer




    Examples
    --------
    >>> op = dpf.operators.EigenValuesFc()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_fields_container = op.outputs.fields_container()
    """

    class _Inputs(dpf.inputs.Inputs):
        _spec = OrderedDict([(0, InputSpec(document='', ellipsis=False, name='fields_container', optional=False, type_names=['fields_container']))])
        def __init__(self, oper):
            self._fields_container = None
            super().__init__(self._spec, oper)

        @property
        def fields_container(self):
            return self._fields_container

        @fields_container.setter
        def fields_container(self, fields_container):
            self._fields_container.connect(fields_container)


    class _Outputs(dpf.outputs.Outputs):
        _spec = OrderedDict([(0, OutputSpec(name='fields_container', type_names=['fields_container'], document=''))])
        def __init__(self, oper):
            self._fields_container = None
            super().__init__(self._spec, oper)

        @property
        def fields_container(self):
            """"""
            return self._fields_container


    def __init__(self, fields_container):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "eig_values_fc"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def fields_container(self):
        """"""
        return self.outputs._fields_container



class EigenVectors(dpf.Operator):
    """DPF "eig_vectors" Operator

    Computes the element-wise eigen vectors for each tensor in the
    fields of the field container

    Available inputs:
     -   ``fields`` : FieldsContainer, Field


    Available outputs:
     -   fields_container


    Parameters
    ----------
    fields : FieldsContainer or Field




    Examples
    --------
    >>> op = dpf.operators.EigenVectors()
    >>> op.inputs.fields.connect(my_fields)
    >>> my_fields_container = op.outputs.fields_container()
    """

    class _Inputs(dpf.inputs.Inputs):
        _spec = OrderedDict([(0, InputSpec(document='', ellipsis=False, name='fields', optional=False, type_names=['fields_container', 'field']))])
        def __init__(self, oper):
            self._fields = None
            super().__init__(self._spec, oper)

        @property
        def fields(self):
            return self._fields

        @fields.setter
        def fields(self, fields):
            self._fields.connect(fields)


    class _Outputs(dpf.outputs.Outputs):
        _spec = OrderedDict([(0, OutputSpec(name='fields_container', type_names=['fields_container'], document=''))])
        def __init__(self, oper):
            self._fields_container = None
            super().__init__(self._spec, oper)

        @property
        def fields_container(self):
            """"""
            return self._fields_container


    def __init__(self, fields):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "eig_vectors"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def fields_container(self):
        """"""
        return self.outputs._fields_container



class EigenValues(dpf.Operator):
    """DPF "eig_values" Operator

    Computes the element-wise eigen values of a tensor field.

    Available inputs:
     -   ``field`` : Field, FieldsContainer
         Field or fields container with only one field is expected


    Available outputs:
     -   field


    Parameters
    ----------
    field : Field or FieldsContainer
        Field or fields container with only one field is expected



    Examples
    --------
    >>> op = dpf.operators.EigenValues()
    >>> op.inputs.field.connect(my_field)
    >>> my_field = op.outputs.field()
    """

    class _Inputs(dpf.inputs.Inputs):
        _spec = OrderedDict([(0, InputSpec(document='field or fields container with only one field is expected', ellipsis=False, name='field', optional=False, type_names=['field', 'fields_container']))])
        def __init__(self, oper):
            self._field = None
            super().__init__(self._spec, oper)

        @property
        def field(self):
            """field or fields container with only one field is expected"""
            return self._field

        @field.setter
        def field(self, field):
            self._field.connect(field)


    class _Outputs(dpf.outputs.Outputs):
        _spec = OrderedDict([(0, OutputSpec(name='field', type_names=['field'], document=''))])
        def __init__(self, oper):
            self._field = None
            super().__init__(self._spec, oper)

        @property
        def field(self):
            """"""
            return self._field


    def __init__(self, field):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "eig_values"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def field(self):
        """"""
        return self.outputs._field



class VonMisesEqv(dpf.Operator):
    """DPF "eqv" Operator

    Computes the element-wise Von-Mises criteria on a tensor field.

    Available inputs:
     -   ``field`` : Field, FieldsContainer
         Field or fields container with only one field is expected


    Available outputs:
     -   field


    Parameters
    ----------
    field : Field or FieldsContainer
        Field or fields container with only one field is expected



    Examples
    --------
    >>> op = dpf.operators.VonMisesEqv()
    >>> op.inputs.field.connect(my_field)
    >>> my_field = op.outputs.field()
    """

    class _Inputs(dpf.inputs.Inputs):
        _spec = OrderedDict([(0, InputSpec(document='field or fields container with only one field is expected', ellipsis=False, name='field', optional=False, type_names=['field', 'fields_container']))])
        def __init__(self, oper):
            self._field = None
            super().__init__(self._spec, oper)

        @property
        def field(self):
            """field or fields container with only one field is expected"""
            return self._field

        @field.setter
        def field(self, field):
            self._field.connect(field)


    class _Outputs(dpf.outputs.Outputs):
        _spec = OrderedDict([(0, OutputSpec(name='field', type_names=['field'], document=''))])
        def __init__(self, oper):
            self._field = None
            super().__init__(self._spec, oper)

        @property
        def field(self):
            """"""
            return self._field


    def __init__(self, field):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "eqv"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def field(self):
        """"""
        return self.outputs._field



class Invariants(dpf.Operator):
    """DPF "invariants_deriv" Operator

    Computes the element-wise invariants of a tensor field.

    Available inputs:
     -   ``field`` : Field


    Available outputs:
     -   field_int
     -   field_eqv
     -   field_max_shear


    Parameters
    ----------
    field : Field




    Examples
    --------
    >>> op = dpf.operators.Invariants()
    >>> op.inputs.field.connect(my_field)
    >>> my_field_int = op.outputs.field_int()
    >>> my_field_eqv = op.outputs.field_eqv()
    >>> my_field_max_shear = op.outputs.field_max_shear()
    """

    class _Inputs(dpf.inputs.Inputs):
        _spec = OrderedDict([(0, InputSpec(document='', ellipsis=False, name='field', optional=False, type_names=['field']))])
        def __init__(self, oper):
            self._field = None
            super().__init__(self._spec, oper)

        @property
        def field(self):
            return self._field

        @field.setter
        def field(self, field):
            self._field.connect(field)


    class _Outputs(dpf.outputs.Outputs):
        _spec = OrderedDict([(0, OutputSpec(name='field_int', type_names=['field'], document='stress intensity field')), (1, OutputSpec(name='field_eqv', type_names=['field'], document='stress equivalent intensity')), (2, OutputSpec(name='field_max_shear', type_names=['field'], document='max shear stress field'))])
        def __init__(self, oper):
            self._field_int = None
            self._field_eqv = None
            self._field_max_shear = None
            super().__init__(self._spec, oper)

        @property
        def field_int(self):
            """stress intensity field"""
            return self._field_int

        @property
        def field_eqv(self):
            """stress equivalent intensity"""
            return self._field_eqv

        @property
        def field_max_shear(self):
            """max shear stress field"""
            return self._field_max_shear


    def __init__(self, field):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "invariants_deriv"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def field_int(self):
        """stress intensity field"""
        return self.outputs._field_int

    @property
    def field_eqv(self):
        """stress equivalent intensity"""
        return self.outputs._field_eqv

    @property
    def field_max_shear(self):
        """max shear stress field"""
        return self.outputs._field_max_shear



class PrincipalInvariantsFc(dpf.Operator):
    """DPF "invariants_fc" Operator

    Computes the element-wise eigen values of all the tensor fields of
    a fields container.

    Available inputs:
     -   ``fields_container`` : FieldsContainer


    Available outputs:
     -   fields_eig_1
     -   fields_eig_2
     -   fields_eig_3


    Parameters
    ----------
    fields_container : FieldsContainer




    Examples
    --------
    >>> op = dpf.operators.PrincipalInvariantsFc()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_fields_eig_1 = op.outputs.fields_eig_1()
    >>> my_fields_eig_2 = op.outputs.fields_eig_2()
    >>> my_fields_eig_3 = op.outputs.fields_eig_3()
    """

    class _Inputs(dpf.inputs.Inputs):
        _spec = OrderedDict([(0, InputSpec(document='', ellipsis=False, name='fields_container', optional=False, type_names=['fields_container']))])
        def __init__(self, oper):
            self._fields_container = None
            super().__init__(self._spec, oper)

        @property
        def fields_container(self):
            return self._fields_container

        @fields_container.setter
        def fields_container(self, fields_container):
            self._fields_container.connect(fields_container)


    class _Outputs(dpf.outputs.Outputs):
        _spec = OrderedDict([(0, OutputSpec(name='fields_eig_1', type_names=['fields_container'], document='first eigen value fields')), (1, OutputSpec(name='fields_eig_2', type_names=['fields_container'], document='second eigen value fields')), (2, OutputSpec(name='fields_eig_3', type_names=['fields_container'], document='third eigen value fields'))])
        def __init__(self, oper):
            self._fields_eig_1 = None
            self._fields_eig_2 = None
            self._fields_eig_3 = None
            super().__init__(self._spec, oper)

        @property
        def fields_eig_1(self):
            """first eigen value fields"""
            return self._fields_eig_1

        @property
        def fields_eig_2(self):
            """second eigen value fields"""
            return self._fields_eig_2

        @property
        def fields_eig_3(self):
            """third eigen value fields"""
            return self._fields_eig_3


    def __init__(self, fields_container):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "invariants_fc"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def fields_eig_1(self):
        """first eigen value fields"""
        return self.outputs._fields_eig_1

    @property
    def fields_eig_2(self):
        """second eigen value fields"""
        return self.outputs._fields_eig_2

    @property
    def fields_eig_3(self):
        """third eigen value fields"""
        return self.outputs._fields_eig_3



class VonMisesEqvFc(dpf.Operator):
    """DPF "eqv_fc" Operator

    Computes the element-wise Von-Mises criteria on all the tensor
    fields of a fields container.

    Available inputs:
     -   ``fields_container`` : FieldsContainer


    Available outputs:
     -   fields_container


    Parameters
    ----------
    fields_container : FieldsContainer




    Examples
    --------
    >>> op = dpf.operators.VonMisesEqvFc()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_fields_container = op.outputs.fields_container()
    """

    class _Inputs(dpf.inputs.Inputs):
        _spec = OrderedDict([(0, InputSpec(document='', ellipsis=False, name='fields_container', optional=False, type_names=['fields_container']))])
        def __init__(self, oper):
            self._fields_container = None
            super().__init__(self._spec, oper)

        @property
        def fields_container(self):
            return self._fields_container

        @fields_container.setter
        def fields_container(self, fields_container):
            self._fields_container.connect(fields_container)


    class _Outputs(dpf.outputs.Outputs):
        _spec = OrderedDict([(0, OutputSpec(name='fields_container', type_names=['fields_container'], document=''))])
        def __init__(self, oper):
            self._fields_container = None
            super().__init__(self._spec, oper)

        @property
        def fields_container(self):
            """"""
            return self._fields_container


    def __init__(self, fields_container):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "eqv_fc"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def fields_container(self):
        """"""
        return self.outputs._fields_container



class InvariantsFc(dpf.Operator):
    """DPF "invariants_deriv_fc" Operator

    Computes the element-wise invariants of all the tensor fields of a
    fields container.

    Available inputs:
     -   ``fields_container`` : FieldsContainer


    Available outputs:
     -   fields_max_shear
     -   fields_eqv
     -   fields_int


    Parameters
    ----------
    fields_container : FieldsContainer




    Examples
    --------
    >>> op = dpf.operators.InvariantsFc()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> my_fields_max_shear = op.outputs.fields_max_shear()
    >>> my_fields_eqv = op.outputs.fields_eqv()
    >>> my_fields_int = op.outputs.fields_int()
    """

    class _Inputs(dpf.inputs.Inputs):
        _spec = OrderedDict([(0, InputSpec(document='', ellipsis=False, name='fields_container', optional=False, type_names=['fields_container']))])
        def __init__(self, oper):
            self._fields_container = None
            super().__init__(self._spec, oper)

        @property
        def fields_container(self):
            return self._fields_container

        @fields_container.setter
        def fields_container(self, fields_container):
            self._fields_container.connect(fields_container)


    class _Outputs(dpf.outputs.Outputs):
        _spec = OrderedDict([(0, OutputSpec(name='fields_int', type_names=['fields_container'], document='stress intensity field')), (1, OutputSpec(name='fields_eqv', type_names=['fields_container'], document='stress equivalent intensity')), (2, OutputSpec(name='fields_max_shear', type_names=['fields_container'], document='max shear stress field'))])
        def __init__(self, oper):
            self._fields_int = None
            self._fields_eqv = None
            self._fields_max_shear = None
            super().__init__(self._spec, oper)

        @property
        def fields_int(self):
            """stress intensity field"""
            return self._fields_int

        @property
        def fields_eqv(self):
            """stress equivalent intensity"""
            return self._fields_eqv

        @property
        def fields_max_shear(self):
            """max shear stress field"""
            return self._fields_max_shear


    def __init__(self, fields_container):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "invariants_deriv_fc"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def fields_int(self):
        """stress intensity field"""
        return self.outputs._fields_int

    @property
    def fields_eqv(self):
        """stress equivalent intensity"""
        return self.outputs._fields_eqv

    @property
    def fields_max_shear(self):
        """max shear stress field"""
        return self.outputs._fields_max_shear



class EigenVectorsFc(dpf.Operator):
    """DPF "eig_vectors_fc" Operator

    Computes the element-wise eigen vectors for each tensor in the
    field

    Available inputs:
     -   ``field`` : FieldsContainer, Field
         Field or fields container with only one field is expected


    Available outputs:
     -   field


    Parameters
    ----------
    field : FieldsContainer or Field
        Field or fields container with only one field is expected



    Examples
    --------
    >>> op = dpf.operators.EigenVectorsFc()
    >>> op.inputs.field.connect(my_field)
    >>> my_field = op.outputs.field()
    """

    class _Inputs(dpf.inputs.Inputs):
        _spec = OrderedDict([(0, InputSpec(document='field or fields container with only one field is expected', ellipsis=False, name='field', optional=False, type_names=['fields_container', 'field']))])
        def __init__(self, oper):
            self._field = None
            super().__init__(self._spec, oper)

        @property
        def field(self):
            """field or fields container with only one field is expected"""
            return self._field

        @field.setter
        def field(self, field):
            self._field.connect(field)


    class _Outputs(dpf.outputs.Outputs):
        _spec = OrderedDict([(0, OutputSpec(name='field', type_names=['field'], document=''))])
        def __init__(self, oper):
            self._field = None
            super().__init__(self._spec, oper)

        @property
        def field(self):
            """"""
            return self._field


    def __init__(self, field):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "eig_vectors_fc"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def field(self):
        """"""
        return self.outputs._field



