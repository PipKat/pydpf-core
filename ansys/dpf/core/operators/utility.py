"""Autogenerated DPF operator classes.

Created on 01/04/2021, 09:21:00
"""
from collections import OrderedDict
from collections import namedtuple
from ansys.dpf import core as dpf

InputSpec = namedtuple('InputSpec', ['document', 'ellipsis', 'name', 'optional',
                                     'type_names'])

OutputSpec = namedtuple('OutputSpec', ['name', 'type_names', 'document'])


class ExtractField(dpf.Operator):
    """DPF "ExtractFromFC" Operator

    Extract the fields at the indeces defined in the vector (in 1)
    form the fields container (in:0).

    Available inputs:
     -   ``fields_container`` : Field, FieldsContainer
         If a field is in input, it is passed on as output

     -   ``indeces`` : list, optional
         Default is the first field


    Available outputs:
     -   field


    Parameters
    ----------
    fields_container : Field or FieldsContainer
        If a field is in input, it is passed on as output

    indeces : list, optional
        Default is the first field

    Examples
    --------
    Create the operator

    >>> op = dpf.operators.ExtractField(my_fields_container,
                                        my_indeces)  # optional
    >>> my_field = op.field

    Alternative: Connect operator using Inputs and Outputs

    >>> op = dpf.operators.ExtractField()
    >>> op.inputs.fields_container.connect(my_fields_container)
    >>> op.inputs.indeces.connect(my_indeces)  # optional
    >>> my_field = op.outputs.field()
    """

    class _Inputs(dpf.inputs.Inputs):
        _spec = OrderedDict([(0, InputSpec(document='if a field is in input, it is passed on as output', ellipsis=False, name='fields_container', optional=False, type_names=['field', 'fields_container'])), (1, InputSpec(document='default is the first field', ellipsis=False, name='indeces', optional=True, type_names=['vector<int32>']))])
        def __init__(self, oper):
            self._fields_container = None
            self._indeces = None
            super().__init__(self._spec, oper)

        @property
        def fields_container(self):
            """if a field is in input, it is passed on as output"""
            return self._fields_container

        @fields_container.setter
        def fields_container(self, fields_container):
            self._fields_container.connect(fields_container)

        @property
        def indeces(self):
            """default is the first field"""
            return self._indeces

        @indeces.setter
        def indeces(self, indeces):
            self._indeces.connect(indeces)


    class _Outputs(dpf.outputs.Outputs):
        _spec = OrderedDict([(0, OutputSpec(name='field', type_names=['field'], document=''))])
        def __init__(self, oper):
            self._field = None
            super().__init__(self._spec, oper)

        @property
        def field(self):
            """"""
            return self._field


    def __init__(self, fields_container, indeces=None, channel=None):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "ExtractFromFC"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def field(self):
        """"""
        return self.outputs._field



