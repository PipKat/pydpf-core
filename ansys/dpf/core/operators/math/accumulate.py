"""Autogenerated DPF operator classes.

Created on 10/06/2021, 13:12:29
"""
from collections import OrderedDict
from collections import namedtuple
from ansys.dpf import core as dpf

InputSpec = namedtuple('InputSpec', ['document', 'ellipsis', 'name', 'optional',
                                     'type_names'])

OutputSpec = namedtuple('OutputSpec', ['name', 'type_names', 'document'])


class Accumulate(dpf.Operator):
    """DPF "accumulate" Operator

    Sum all the elementary data of a field to get one elementary data
    at the end.

    Available inputs:
     -   fieldA : Field, FieldsContainer
         Field or fields container with only one field is expected
    Available outputs:
     -   field


    Parameters
    ----------
    fieldA : Field or FieldsContainer
        Field or fields container with only one field is expected



    Examples
    --------
    >>> op = dpf.operators.Accumulate()
    >>> op.inputs.fieldA.connect(my_fieldA)
    >>> my_field = op.outputs.field()
    """  # noqa: E501

    class _Inputs(dpf.inputs.Inputs):

        # fmt: off
        _spec = OrderedDict([(0, InputSpec(document='field or fields container with only one field is expected', ellipsis=False, name='fieldA', optional=False, type_names=['field', 'fields_container']))]) # noqa: E501
        # fmt: on

        def __init__(self, oper):
            self._fieldA = None
            super().__init__(self._spec, oper)

        @property
        def fieldA(self):
            """field or fields container with only one field is
            expected"""
            return self._fieldA

        @fieldA.setter
        def fieldA(self, fieldA):
            self._fieldA.connect(fieldA)

    class _Outputs(dpf.outputs.Outputs):

        # fmt: off
        _spec = OrderedDict([(0, OutputSpec(name='field', type_names=['field'], document=''))]) # noqa: E501
        # fmt: on

        def __init__(self, oper):
            self._field = None
            super().__init__(self._spec, oper)

        @property
        def field(self):
            return self._field

    def __init__(self, fieldA):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "accumulate"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def field(self):
        return self.outputs._field
