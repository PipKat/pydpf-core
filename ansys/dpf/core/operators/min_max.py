"""Autogenerated DPF operator classes.

Created on 01/04/2021, 09:21:00
"""
from collections import OrderedDict
from collections import namedtuple
from ansys.dpf import core as dpf

InputSpec = namedtuple('InputSpec', ['document', 'ellipsis', 'name', 'optional',
                                     'type_names'])

OutputSpec = namedtuple('OutputSpec', ['name', 'type_names', 'document'])


class MinMaxInc(dpf.Operator):
    """DPF "min_max_inc" Operator

    Compute the component-wise minimum (out 0) and maximum (out 1)
    over coming fields.

    Available inputs:
     -   ``field`` : Field

     -   ``domain_id`` : int, optional


    Available outputs:
     -   field_min
     -   field_max
     -   domain_ids_min
     -   domain_ids_max


    Parameters
    ----------
    field : Field


    domain_id : int, optional


    Examples
    --------
    Create the operator

    >>> op = dpf.operators.MinMaxInc(my_field,
                                     my_domain_id)  # optional
    >>> my_field_min = op.field_min
    >>> my_field_max = op.field_max
    >>> my_domain_ids_min = op.domain_ids_min
    >>> my_domain_ids_max = op.domain_ids_max

    Alternative: Connect operator using Inputs and Outputs

    >>> op = dpf.operators.MinMaxInc()
    >>> op.inputs.field.connect(my_field)
    >>> op.inputs.domain_id.connect(my_domain_id)  # optional
    >>> my_field_min = op.outputs.field_min()
    >>> my_field_max = op.outputs.field_max()
    >>> my_domain_ids_min = op.outputs.domain_ids_min()
    >>> my_domain_ids_max = op.outputs.domain_ids_max()
    """

    class _Inputs(dpf.inputs.Inputs):
        _spec = OrderedDict([(0, InputSpec(document='', ellipsis=False, name='field', optional=False, type_names=['field'])), (17, InputSpec(document='', ellipsis=False, name='domain_id', optional=True, type_names=['int32']))])
        def __init__(self, oper):
            self._field = None
            self._domain_id = None
            super().__init__(self._spec, oper)

        @property
        def field(self):
            return self._field

        @field.setter
        def field(self, field):
            self._field.connect(field)

        @property
        def domain_id(self):
            return self._domain_id

        @domain_id.setter
        def domain_id(self, domain_id):
            self._domain_id.connect(domain_id)


    class _Outputs(dpf.outputs.Outputs):
        _spec = OrderedDict([(0, OutputSpec(name='field_min', type_names=['field'], document='')), (1, OutputSpec(name='field_max', type_names=['field'], document='')), (2, OutputSpec(name='domain_ids_min', type_names=['scoping'], document='')), (3, OutputSpec(name='domain_ids_max', type_names=['scoping'], document=''))])
        def __init__(self, oper):
            self._field_min = None
            self._field_max = None
            self._domain_ids_min = None
            self._domain_ids_max = None
            super().__init__(self._spec, oper)

        @property
        def field_min(self):
            """"""
            return self._field_min

        @property
        def field_max(self):
            """"""
            return self._field_max

        @property
        def domain_ids_min(self):
            """"""
            return self._domain_ids_min

        @property
        def domain_ids_max(self):
            """"""
            return self._domain_ids_max


    def __init__(self, field, domain_id=None, channel=None):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "min_max_inc"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def field_min(self):
        """"""
        return self.outputs._field_min

    @property
    def field_max(self):
        """"""
        return self.outputs._field_max

    @property
    def domain_ids_min(self):
        """"""
        return self.outputs._domain_ids_min

    @property
    def domain_ids_max(self):
        """"""
        return self.outputs._domain_ids_max



