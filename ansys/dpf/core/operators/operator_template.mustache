"""Autogenerated DPF operator classes.

Created on {{date_and_time}}.
"""
from warnings import warn
from ansys.dpf.core.dpf_operator import Operator
from ansys.dpf.core.inputs import Input, _Inputs
{{#outputs}}
from ansys.dpf.core.outputs import Output, _Outputs
{{/outputs}}
{{^outputs}}
from ansys.dpf.core.outputs import _Outputs
{{/outputs}}
from ansys.dpf.core.operators.specification import PinSpecification, Specification

def {{snake_case_class_name}}(*args, **kwargs):
    warn(
        "`{{snake_case_class_name}}` is deprecated. "
        "Use `{{class_name}}` instead."
    )
    return {{class_name}}(*args, **kwargs)

class {{class_name}}(Operator):
    """{{docstring}}

    Parameters
    ----------
    {{#input_pins}}
    {{#optional}}
    {{name}} :{{#types_for_docstring}} {{types_for_docstring}},{{/types_for_docstring}} optional
    {{/optional}}
    {{^optional}}
    {{name}} :{{#types_for_docstring}} {{types_for_docstring}}{{/types_for_docstring}}
    {{/optional}}
    {{#document}}
        {{document}}
    {{/document}}
    {{/input_pins}}


    Examples
    --------
    >>> op = dpf.operators.{{class_name}}()
    {{#input_pins}}
    {{#optional}}
    >>> op.inputs.{{name}}.connect(my_{{name}}) # optional
    {{/optional}}
    {{^optional}}
    >>> op.inputs.{{name}}.connect(my_{{name}})
    {{/optional}}
    {{/input_pins}}
    {{#output_pins}}
    >>> my_{{name}} = op.outputs.{{name}}()
    {{/output_pins}}
    """ # noqa: E501

    {{#init_parameters}}
    def __init__(self, {{init_parameters}}, config=None, server=None):
    {{/init_parameters}}
    {{^init_parameters}}
    def __init__(self, config=None, server=None):
    {{/init_parameters}}
        super().__init__(name="{{snake_case_class_name}}", config=config, server=server)
        self._inputs = Inputs{{class_name}}(self)
        self._outputs = Outputs{{class_name}}(self)
        {{#input_pins}}
        if {{name}} != None:
            self.inputs.{{name}}.connect({{name}})
        {{/input_pins}}

    @staticmethod
    def _spec():
        description = """{{specification_description}}"""
        spec = Specification(
            description=description,
            map_input_pin_spec={
                {{#input_pins}}
                {{id}}: PinSpecification(
                    name="{{name}}",
                    {{#types.length}}
                    type_names={{types}},
                    {{/types.length}}
                    optional={{optional}},
                    document="""{{document}}""",
                ),
                {{/input_pins}}
            },
            map_output_pin_spec={
                {{#output_pins}}
                {{id}}: PinSpecification(
                    name="{{name}}",
                    {{#types.length}}
                    type_names={{types}},
                    {{/types.length}}
                    optional={{optional}},
                    document="""{{document}}""",
                ),
                {{/output_pins}}
            },
        )
        return spec

    @staticmethod
    def default_config():
        return Operator.default_config(name="{{snake_case_class_name}}")

    @property
    def inputs(self):
        """Enables to connect inputs to the operator

        Returns
        --------
        inputs : Inputs{{class_name}}
        """
        return super().inputs

    @property
    def outputs(self):
        """Enables to get outputs of the operator by evaluationg it

        Returns
        --------
        outputs : Outputs{{class_name}}
        """
        return super().outputs

class Inputs{{class_name}}(_Inputs):
    """Intermediate class used to connect user inputs to
    {{snake_case_class_name}} operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.{{category}}.{{snake_case_class_name}}()
    {{#input_pins}}
    >>> my_{{name}} = dpf.{{main_type}}()
    >>> op.inputs.{{name}}.connect(my_{{name}})
    {{/input_pins}}
    """

    def __init__(self, op: Operator):
        super().__init__({{snake_case_class_name}}._spec().inputs, op)
        {{#input_pins}}
        self._{{name}} = Input({{snake_case_class_name}}._spec().input_pin({{id}}), {{id}}, op, {{ellipsis}})
        self._inputs.append(self._{{name}})
        {{/input_pins}}

    {{#input_pins}}
    @property
    def {{name}}(self):
        """Allows to connect {{name}} input to the operator.
        {{#document}}

        {{document}}
        {{/document}}

        Returns
        -------
        my_{{name}} :{{#types_for_docstring}} {{types_for_docstring}}{{/types_for_docstring}}

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.{{category}}.{{snake_case_class_name}}()
        >>> op.inputs.{{name}}.connect(my_{{name}})
        >>> # or
        >>> op.inputs.{{name}}(my_{{name}})
        """
        return self._{{name}}

    {{/input_pins}}
class Outputs{{class_name}}(_Outputs):
    """Intermediate class used to get outputs from
    {{snake_case_class_name}} operator.

    Examples
    --------
    >>> from ansys.dpf import core as dpf
    >>> op = dpf.operators.{{category}}.{{snake_case_class_name}}()
    >>> # Connect inputs : op.inputs. ...
    {{#output_pins}}
    >>> result_{{name}} = op.outputs.{{name}}()
    {{/output_pins}}
    """

    def __init__(self, op: Operator):
        super().__init__({{snake_case_class_name}}._spec().outputs, op)
        {{#output_pins}}
        self._{{name}} = Output({{snake_case_class_name}}._spec().output_pin({{id}}), {{id}}, op)
        self._outputs.append(self._{{name}})
        {{/output_pins}}
    {{#output_pins}}

    @property
    def {{name}}(self):
        """Allows to get {{name}} output of the operator

        Returns
        ----------
        my_{{name}} :{{#types_for_docstring}} {{types_for_docstring}}{{/types_for_docstring}}

        Examples
        --------
        >>> from ansys.dpf import core as dpf
        >>> op = dpf.operators.{{category}}.{{snake_case_class_name}}()
        >>> # Connect inputs : op.inputs. ...
        >>> result_{{name}} = op.outputs.{{name}}()
        """ # noqa: E501
        return self._{{name}}
    {{/output_pins}}