"""Autogenerated DPF operator classes.

Created on 10/06/2021, 13:12:29
"""
from collections import OrderedDict
from collections import namedtuple
from ansys.dpf import core as dpf

InputSpec = namedtuple('InputSpec', ['document', 'ellipsis', 'name', 'optional',
                                     'type_names'])

OutputSpec = namedtuple('OutputSpec', ['name', 'type_names', 'document'])


class FieldBandPass(dpf.Operator):
    """DPF "core::field::band_pass" Operator

    The band pass filter returns all the values strictly superior to
    the min threshold value and stricly inferior to the max threshold
    value in input.

    Available inputs:
     -   min_threshold : float, Field
         A min threshold scalar or a field containing one value is
         expected
     -   max_threshold : float, Field
         A max threshold scalar or a field containing one value is
         expected
     -   field : Field, FieldsContainer
         Field or fields container with only one field is expected
    Available outputs:
     -   field


    Parameters
    ----------
    field : Field or FieldsContainer
        Field or fields container with only one field is expected

    min_threshold : float or Field
        A min threshold scalar or a field containing one value is
        expected

    max_threshold : float or Field
        A max threshold scalar or a field containing one value is
        expected



    Examples
    --------
    >>> op = dpf.operators.FieldBandPass()
    >>> op.inputs.min_threshold.connect(my_min_threshold)
    >>> op.inputs.max_threshold.connect(my_max_threshold)
    >>> op.inputs.field.connect(my_field)
    >>> my_field = op.outputs.field()
    """  # noqa: E501

    class _Inputs(dpf.inputs.Inputs):

        # fmt: off
        _spec = OrderedDict([(0, InputSpec(document='field or fields container with only one field is expected', ellipsis=False, name='field', optional=False, type_names=['field', 'fields_container'])), (1, InputSpec(document='a min threshold scalar or a field containing one value is expected', ellipsis=False, name='min_threshold', optional=False, type_names=['double', 'field'])), (2, InputSpec(document='a max threshold scalar or a field containing one value is expected', ellipsis=False, name='max_threshold', optional=False, type_names=['double', 'field']))]) # noqa: E501
        # fmt: on

        def __init__(self, oper):
            self._field = None
            self._min_threshold = None
            self._max_threshold = None
            super().__init__(self._spec, oper)

        @property
        def field(self):
            """field or fields container with only one field is
            expected"""
            return self._field

        @field.setter
        def field(self, field):
            self._field.connect(field)

        @property
        def min_threshold(self):
            """a min threshold scalar or a field containing one value
            is expected"""
            return self._min_threshold

        @min_threshold.setter
        def min_threshold(self, min_threshold):
            self._min_threshold.connect(min_threshold)

        @property
        def max_threshold(self):
            """a max threshold scalar or a field containing one value
            is expected"""
            return self._max_threshold

        @max_threshold.setter
        def max_threshold(self, max_threshold):
            self._max_threshold.connect(max_threshold)

    class _Outputs(dpf.outputs.Outputs):

        # fmt: off
        _spec = OrderedDict([(0, OutputSpec(name='field', type_names=['field'], document=''))]) # noqa: E501
        # fmt: on

        def __init__(self, oper):
            self._field = None
            super().__init__(self._spec, oper)

        @property
        def field(self):
            return self._field

    def __init__(self, field, min_threshold, max_threshold):
        if channel is None:
            channel = dpf.server._global_channel()

        self._channel = channel
        self._stub = self._connect()
        self._message = None
        self._description = None
        self.name = "core::field::band_pass"

        self._Operator__send_init_request()

        self.inputs = self._Inputs(self)
        self.outputs = self._Outputs(self)

    @property
    def field(self):
        return self.outputs._field
